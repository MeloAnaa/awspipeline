version: 0.2

phases:
  install:
    commands:
      - yum remove -y curl-minimal || true
      - yum update -y
      - yum install -y unzip tar gzip jq curl --allowerasing
      - TERRAFORM_VERSION="1.5.7"
      - wget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
      - unzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /usr/local/bin/

  pre_build:
    commands:
      - echo "Validando infraestrutura com Firefly..."
      - |
        # 1. Autenticação - versão limpa sem debug
        AUTH_RESPONSE=$(curl -s -X POST "https://api.firefly.ai/api/v1.0/login" \
          -H "Content-Type: application/json" \
          -d "{\"accessKey\": \"$FIREFLY_ACCESS_KEY\", \"secretKey\": \"$FIREFLY_SECRET_KEY\"}")
        
        # Debug opcional (descomente se necessário)
        # echo "Resposta da autenticação: $AUTH_RESPONSE"
        
        ACCESS_TOKEN=$(echo "$AUTH_RESPONSE" | jq -r '.accessToken')
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "Falha na autenticação. Resposta:"
          echo "$AUTH_RESPONSE" | jq .
          exit 1
        fi

        # 2. Gera plano Terraform
        cd terraform
        terraform init
        terraform plan -out=tfplan
        terraform show -json tfplan > ../tfplan.json
        cd ..

        # 3. Validação
        VALIDATION_RESPONSE=$(curl -s -X POST "https://api.firefly.ai/api/v1.0/validate" \
          -H "Authorization: Bearer $ACCESS_TOKEN" \
          -H "Content-Type: application/json" \
          -d @tfplan.json)
        
        # Verifica se é JSON válido
        if ! echo "$VALIDATION_RESPONSE" | jq -e . >/dev/null 2>&1; then
          echo "Erro: Resposta inválida da API. Verifique:"
          echo "1. Se o endpoint /validate está correto"
          echo "2. Se o token tem permissões"
          echo "3. O formato do tfplan.json"
          echo "Resposta bruta: $VALIDATION_RESPONSE"
          exit 1
        fi

        # Processa resposta
        STATUS=$(echo "$VALIDATION_RESPONSE" | jq -r '.status')
        if [ "$STATUS" != "approved" ]; then
          echo "Firefly rejeitou a infraestrutura:"
          echo "$VALIDATION_RESPONSE" | jq .
          exit 1
        fi

        echo "Validação aprovada com sucesso!"

  build:
    commands:
      - echo "Deploy aprovado! Aplicando infraestrutura..."
      - cd terraform && terraform apply -auto-approve

env:
  secrets-manager:
    FIREFLY_ACCESS_KEY: "firefly/credentials-labana2025:access-key"
    FIREFLY_SECRET_KEY: "firefly/credentials-labana2025:secret-key"